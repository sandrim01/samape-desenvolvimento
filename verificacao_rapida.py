#!/usr/bin/env python3
"""
Verifica√ß√£o r√°pida de problemas no sistema SAMAPE
"""

def check_import_issues():
    """Verifica se h√° problemas de importa√ß√£o"""
    print("üîç Verificando importa√ß√µes principais...")
    
    try:
        import app
        print("‚úÖ app.py - OK")
    except Exception as e:
        print(f"‚ùå app.py - ERRO: {e}")
        return False
    
    try:
        import routes
        print("‚úÖ routes.py - OK")
    except Exception as e:
        print(f"‚ùå routes.py - ERRO: {e}")
        return False
        
    try:
        import models
        print("‚úÖ models.py - OK")
    except Exception as e:
        print(f"‚ùå models.py - ERRO: {e}")
        return False
        
    return True

def check_database_tables():
    """Verifica estrutura das tabelas"""
    print("\nüóÑÔ∏è Verificando estrutura do banco de dados...")
    
    try:
        from app import app, db
        from models import StockItem, StockMovement, User
        from sqlalchemy import inspect
        
        with app.app_context():
            # Usar inspector para verificar tabelas
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            # Verificar se as tabelas existem
            if 'stock_items' in existing_tables:
                print("‚úÖ Tabela stock_items - OK")
            else:
                print("‚ùå Tabela stock_items - N√ÉO ENCONTRADA")
                
            if 'stock_movements' in existing_tables:
                print("‚úÖ Tabela stock_movements - OK")
            else:
                print("‚ùå Tabela stock_movements - N√ÉO ENCONTRADA")
                
            if 'users' in existing_tables:
                print("‚úÖ Tabela users - OK")
            else:
                print("‚ùå Tabela users - N√ÉO ENCONTRADA")
                
            # Contar registros
            try:
                stock_count = StockItem.query.count()
                print(f"üìä Itens de estoque: {stock_count}")
                
                user_count = User.query.count()
                print(f"üë• Usu√°rios: {user_count}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao consultar dados: {e}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o do banco: {e}")
        return False

def check_routes_registration():
    """Verifica se as rotas est√£o registradas corretamente"""
    print("\nüõ£Ô∏è Verificando rotas registradas...")
    
    try:
        from app import app
        
        # Rotas importantes para verificar
        important_routes = [
            '/stock',
            '/estoque/<int:id>/excluir',
            '/stock/item/<int:id>/delete',
            '/stock/new',
            '/stock/<int:id>/view',
            '/stock/<int:id>/edit'
        ]
        
        registered_routes = []
        for rule in app.url_map.iter_rules():
            registered_routes.append(str(rule))
        
        missing_routes = []
        for route in important_routes:
            # Verificar se a rota ou uma similar existe
            route_found = any(route in reg_route or reg_route.startswith(route.split('<')[0]) 
                            for reg_route in registered_routes)
            
            if route_found:
                print(f"‚úÖ Rota {route} - OK")
            else:
                print(f"‚ùå Rota {route} - N√ÉO ENCONTRADA")
                missing_routes.append(route)
        
        if missing_routes:
            print(f"\n‚ö†Ô∏è Rotas em falta: {len(missing_routes)}")
            return False
        else:
            print("‚úÖ Todas as rotas principais registradas")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar rotas: {e}")
        return False

def check_csrf_configuration():
    """Verifica configura√ß√£o CSRF"""
    print("\nüîí Verificando configura√ß√£o CSRF...")
    
    try:
        from app import app
        
        csrf_enabled = app.config.get('WTF_CSRF_ENABLED', True)
        print(f"üîê CSRF Habilitado: {csrf_enabled}")
        
        if not csrf_enabled:
            print("‚ö†Ô∏è AVISO: CSRF est√° desabilitado - pode causar problemas de seguran√ßa")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar CSRF: {e}")
        return False

def main():
    print("üöÄ VERIFICA√á√ÉO R√ÅPIDA DO SISTEMA SAMAPE")
    print("=" * 50)
    
    issues = []
    
    # Verifica√ß√µes
    if not check_import_issues():
        issues.append("Problemas de importa√ß√£o")
    
    if not check_database_tables():
        issues.append("Problemas no banco de dados")
        
    if not check_routes_registration():
        issues.append("Problemas no registro de rotas")
        
    if not check_csrf_configuration():
        issues.append("Problemas na configura√ß√£o CSRF")
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 50)
    
    if not issues:
        print("‚úÖ SISTEMA OK - Nenhum problema detectado")
        print("üåê Servidor dispon√≠vel em: http://127.0.0.1:5000")
        print("üì¶ Estoque dispon√≠vel em: http://127.0.0.1:5000/stock")
    else:
        print("‚ö†Ô∏è PROBLEMAS ENCONTRADOS:")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
            
        print("\nüí° SOLU√á√ïES RECOMENDADAS:")
        print("   ‚Ä¢ Verificar logs do servidor para mais detalhes")
        print("   ‚Ä¢ Confirmar se todas as migra√ß√µes foram executadas")
        print("   ‚Ä¢ Testar funcionalidades manualmente no navegador")

if __name__ == "__main__":
    main()
